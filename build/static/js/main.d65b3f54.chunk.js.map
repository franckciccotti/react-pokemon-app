{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","arguments","length","undefined","Date","concat","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","_ref","pokemon","_ref$borderColor","borderColor","_useState","useState","_useState2","_slicedToArray","setColor","history","useHistory","_jsx","className","onClick","id","push","onMouseEnter","onMouseLeave","children","_jsxs","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","_classCallCheck","_createClass","key","value","_this","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","_this2","data","isEmpty","find","_this3","method","body","JSON","stringify","headers","index","findIndex","_this4","filter","_this5","term","_this6","toUpperCase","includes","Object","keys","console","process","PokemonSearch","setTerm","_useState3","_useState4","setPokemons","placeholder","onChange","e","target","searchPokemon","handleInputChange","Link","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","_defineProperty","_objectSpread","addPokemon","updatePokemon","isAddForm","validateForm","newForm","startsWith","endsWith","test","isTypesValid","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","setTimeout","isAutenticated","Login","message","setMessage","login","href","PrivateRoute","Component","component","rest","_objectWithoutProperties","_excluded","Route","render","props","Redirect","pathname","App","Router","Switch","exact","path","PokemonDetail","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d65b3f54.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\r\n}\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n   \r\n    switch (type) {\r\n      case 'Feu': \r\n        color = 'red lighten-1'; \r\n        break; \r\n      case 'Eau': \r\n        color = 'blue lighten-1'; \r\n        break; \r\n      case 'Plante': \r\n        color = 'green lighten-1'; \r\n        break; \r\n      case 'Insecte': \r\n        color = 'brown lighten-1'; \r\n        break; \r\n      case 'Normal': \r\n        color = 'grey lighten-3'; \r\n        break; \r\n      case 'Vol': \r\n        color = 'blue lighten-3'; \r\n        break; \r\n      case 'Poison': \r\n        color = 'deep-purple accent-1'; \r\n        break; \r\n      case 'Fée': \r\n        color = 'pink lighten-4'; \r\n        break; \r\n      case 'Psy': \r\n        color = 'deep-purple darken-2'; \r\n        break; \r\n      case 'Electrik': \r\n        color = 'lime accent-1'; \r\n        break; \r\n      case 'Combat': \r\n        color = 'deep-orange'; \r\n        break; \r\n      default: \r\n        color = 'grey'; \r\n        break; \r\n    }\r\n   \r\n    return `chip ${color}`;\r\n  }\r\n\r\n  export default formatType;","import React, { FunctionComponent, useState } from \"react\";\r\nimport Pokemon from \"../models/pokemon\";\r\nimport './pokemon-card.css';\r\n\r\nimport formatDate from \"../helpers/format-date\";\r\nimport formatType from \"../helpers/format-type\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    borderColor?: string\r\n};\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor='#009688'}) => {\r\n\r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor);\r\n    }\r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5'); //On remet la bordure en gris \r\n    }\r\n\r\n    const goToPokemon = (id: number) => {\r\n        history.push(`/pokemons/${id}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n            <div className=\"card horizontal\" style={{ borderColor: color }}>\r\n\r\n                <div className=\"card-image\">\r\n                    <img src={pokemon.picture} alt={pokemon.name} />\r\n                </div>\r\n\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <p>{pokemon.name}</p>\r\n                        <p><small>{formatDate(pokemon.created)}</small></p>\r\n                        {pokemon.types.map(type => (\r\n                            <span key={type} className={formatType(type)}>{type}</span>    \r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","/* Version de PRODUCTION */\r\nimport Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|undefined> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    delete pokemon.created;\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.toUpperCase().includes(term.toUpperCase()));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n \r\nconst PokemonSearch: FunctionComponent = () => {\r\n  \r\n  const [term, setTerm] = useState<string>('');\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n \r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const term = e.target.value;\r\n    setTerm(term);\r\n \r\n    if(term.length <= 1) {\r\n      setPokemons([]);\r\n      return;\r\n    }\r\n \r\n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\"> \r\n    <div className=\"col s12 m6 offset-m3\"> \r\n      <div className=\"card\"> \r\n      <div className=\"card-content\"> \r\n        <div className=\"input-field\"> \r\n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \r\n        </div> \r\n        <div className='collection'>\r\n        {pokemons.map((pokemon) => (\r\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n            {pokemon.name}\r\n          </Link>\r\n        ))}\r\n        </div> \r\n      </div> \r\n      </div> \r\n    </div> \r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport { Link } from 'react-router-dom';\r\nimport PokemonSearch from '../components/pokemon-search';\r\n  \r\nconst PokemonList: FunctionComponent = () => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      <h1 className=\"center\">Pokédex</h1>\r\n      <div className=\"container\"> \r\n        <div className=\"row\">\r\n        <PokemonSearch />\r\n        {pokemons.map(pokemon => (\r\n          <PokemonCard key={pokemon.id} pokemon={pokemon}/>\r\n        ))}\r\n        </div>\r\n        <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\" \r\n          style={{position: 'fixed', bottom: '25px', right: '25px'}}\r\n          to=\"/pokemon/add\"\r\n        >\r\n          <i className='material-icons'>add</i>\r\n        </Link>\r\n      </div>\r\n    </div> \r\n  );\r\n}\r\n  \r\nexport default PokemonList;\r\n\r\n","import React, { FunctionComponent } from 'react';\r\n  \r\nconst Loader: FunctionComponent = () => {\r\n   \r\n  return (\r\n    <div className=\"preloader-wrapper big active\"> \r\n      <div className=\"spinner-layer spinner-blue\"> \r\n\r\n        <div className=\"circle-clipper left\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n\r\n        <div className=\"gap-patch\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n        \r\n        <div className=\"circle-clipper right\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n        \r\n      </div> \r\n   </div> \r\n  );\r\n}\r\n   \r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n  \r\ntype Params = { id: string };\r\n  \r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\"> \r\n            <h2 className=\"header center\">{ pokemon.name }</h2>\r\n            <div className=\"card hoverable\"> \r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <Link to={`/pokemons/edit/${pokemon.id}`} className='btn btn-floating halfway-fab waves-effect waves-light'>\r\n                  <i className='material-icons'>edit</i>\r\n                </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr> \r\n                        <td>Nom</td> \r\n                        <td><strong>{ pokemon.name }</strong></td> \r\n                      </tr>\r\n                      <tr> \r\n                        <td>Points de vie</td> \r\n                        <td><strong>{ pokemon.hp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Dégâts</td> \r\n                        <td><strong>{ pokemon.cp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Types</td> \r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                           <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}</td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Date de création</td> \r\n                        <td>{formatDate(pokemon.created)}</td> \r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\">\r\n          <Loader></Loader>\r\n        </h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean;\r\n};\r\n  \r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n  \r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture},\r\n        name: { value: pokemon.name, isValid: true},\r\n        hp: { value: pokemon.hp, isValid: true},\r\n        cp: { value: pokemon.cp, isValid: true},\r\n        types: { value: pokemon.types, isValid: true }\r\n    })\r\n\r\n    const history = useHistory();\r\n\r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasType = (type: string): boolean => {\r\n        return form.types.value.includes(type);\r\n    }\r\n   \r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = {[fieldName]: {value: fieldValue}};\r\n\r\n        setForm({...form, ...newField})\r\n    }\r\n\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const checked = e.target.checked;\r\n        let newField: Field;\r\n    \r\n        if(checked) {\r\n          // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\r\n          const newTypes: string[] = form.types.value.concat([type]);\r\n          newField = { value: newTypes };\r\n        } else {\r\n          // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\r\n          const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n          newField = { value: newTypes };\r\n        }\r\n    \r\n        setForm({...form, ...{ types: newField }});\r\n    }\r\n    \r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if(isFormValid) {\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name = form.name.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.types = form.types.value;\r\n            isEditForm ? updatePokemon() : addPokemon();\r\n        }\r\n    }\r\n\r\n    const addPokemon = () => {\r\n        PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons/`));\r\n    }\r\n\r\n    const updatePokemon = () => {\r\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\r\n    }\r\n\r\n    const isAddForm = () => {\r\n        return !isEditForm;\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator url\r\n        if(isAddForm()) {\r\n            const start = \"http://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n            const end = \".png\";\r\n\r\n            if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n                const errorMsg: string = \"L'url n'est pas valide.\";\r\n                const newField: Field = {value: form.picture.value, error: errorMsg, isValid: false};\r\n                newForm = { ...form, ...{ picture: newField }}\r\n            } else {\r\n                const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n                newForm = { ...form, ...{ picture: newField } };\r\n            }\r\n\r\n        }\r\n        \r\n        // Validator name\r\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n          const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n          const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n          newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n    \r\n        // Validator hp\r\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n          const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n          const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n          newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n    \r\n        // Validator cp\r\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n          const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n          const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n          newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n    \r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n      }\r\n    \r\n      const isTypesValid = (type: string): boolean => {\r\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n        if (form.types.value.length === 1 && hasType(type)) {\r\n          return false;\r\n        }\r\n        \r\n        // Cas n°1: Le pokémon a au moins 3 types.\r\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n        if (form.types.value.length >= 3 && !hasType(type)) { \r\n          return false; \r\n        } \r\n        \r\n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n        return true;\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/Pokemons`));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\"> \r\n                        {isEditForm && (\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                                <span className='btn-floating halfway-fab waves-effect waves-light'>\r\n                                    <i onClick={deletePokemon} className='material-icons'>delete</i>\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Pokemon picture */}\r\n                                {isAddForm() && (\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"picture\">Image</label>\r\n                                        <input id=\"picture\" name=\"picture\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                                        {/* error */}\r\n                                        {form.picture.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.picture.error}\r\n                                        </div>}\r\n                                    </div>\r\n                                )}\r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {form.name.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.name.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {form.hp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.hp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {form.cp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.cp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{marginBottom: '10px'}}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\r\n                                                <span>\r\n                                                <p className={formatType(type)}>{ type }</p>\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n \r\ntype Params = { id: string };\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={true} ></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        // <h4 className=\"center\">Aucun pokémon à afficher !</h4>\r\n        <h4 className=\"center\">\r\n          <Loader></Loader>\r\n        </h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","export default class Pokemon {\r\n    // 1. Typage des propiétés d'un pokémon.\r\n    id: number;\r\n    name: string;\r\n    hp: number;\r\n    cp: number;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created?: Date;\r\n     \r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n     id: number,\r\n     name: string = '...',\r\n     hp: number = 100,\r\n     cp: number = 10,\r\n     //  picture: string = 'http://...',\r\n     picture: string = 'http://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n     types: Array<string> = ['Normal'],\r\n     created: Date = new Date()\r\n    ) {\r\n     // 3. Initialisation des propiétés d'un pokémons.\r\n     this.id = id;\r\n     this.name = name;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n   }","import React, { FunctionComponent, useState } from \"react\";\r\nimport PokemonForm from \"../components/pokemon-form\";\r\nimport Pokemon from \"../models/pokemon\";\r\n\r\nconst PokemonAdd: FunctionComponent = () => {\r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un pokémon</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonAdd;","export default class AuthenticationService {\r\n    static isAutenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n        const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAutenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            }, 1000);       \r\n        });\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  username: Field,\r\n  password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    username: { value: '' },\r\n    password: { value: '' },\r\n  });\r\n\r\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (Login = pikachu / Mot de passe = pikachu)');\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // Validator username\r\n    if(form.username.value.length < 3) {\r\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    }\r\n\r\n    // Validator password\r\n    if(form.password.value.length < 6) {\r\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n\r\n    return newForm.username.isValid && newForm.password.isValid;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      setMessage('👉 Tentative de connexion en cours ...');\r\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n        if(!isAuthenticated) {\r\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n          return;\r\n        }\r\n        \r\n        history.push('/pokemons');\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Form message */}\r\n                {message && <div className=\"form-group\">\r\n                  <div className=\"card-panel grey lighten-5\">\r\n                    {message}\r\n                  </div>\r\n                </div>}\r\n                {/* Field username */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"username\">Identifiant (login = pikachu)</label>\r\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.username.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.username.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Field password */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"password\">Mot de passe (mdp = pikachu)</label>\r\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.password.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.password.error} \r\n                  </div>} \r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n            <div>\r\n                \r\n                <h6><strong>Cours UDEMY \"Développeur React | Formation complète\" de Simon DIENY (Formateur Javascript Fullstack)</strong></h6>\r\n                <h6>Notions React apprises :</h6>\r\n                <ol>\r\n                    <li>Les composants</li>\r\n                    <li>Le Dom virtuel avec JSX</li>    \r\n                    <li>Les Props</li>\r\n                    <li>Les Hooks personnalisés</li>\r\n                    <li>Les Routes</li>\r\n                    <li>Les Formulaires</li>\r\n                    <li>Requêtes HTTP (Les services CRUD / API Rest via librairie json server)</li>\r\n                    <li>Autocomplétion (Un service personnalisé sur champ de recherche)</li>\r\n                    <li>Authentification avec formulaire de connexion</li>\r\n                    <li>Déploiement avec Google Firebase Hosting</li>\r\n                </ol>\r\n                <ul>\r\n                    <li>Bonus : ECMAScript 2015 ES6 (promesses, let/const, fonctions fléchées, Set/Map,...)</li>\r\n                </ul>\r\n\r\n                <strong>Le Github : </strong><a href=\"https://github.com/franckciccotti/react-pokemon-app\" target='blanc' >https://github.com/franckciccotti/react-pokemon-app</a>\r\n\r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n \r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n  <Route {...rest} render={(props) => {\r\n    const isAuthenticated = AuthenticationService.isAutenticated;\r\n    if (!isAuthenticated) {    \r\n      return <Redirect to={{ pathname: '/login' }} />\r\n    }\r\n  \r\n    return <Component {...props} />\r\n  }} />\r\n);\r\n  \r\nexport default PrivateRoute;","import React, { FunctionComponent } from 'react';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\r\nimport PokemonList from './pages/pokemon-list';\r\nimport PokemonDetail from './pages/pokemon-detail';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonAdd from './pages/pokemon-add';\r\nimport Login from './pages/login';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nconst App: FunctionComponent = () => {\r\n    \r\n    return (\r\n        \r\n        <Router>\r\n            <div>\r\n\r\n                {/* La barre de navigation commun à toutes les pages */}\r\n                <nav>\r\n                    <div className='nav-wrapper teal'>\r\n                        <Link to=\"/\" className=\"brand-logo center\">Pokédex en REACT (Franck Ciccotti)</Link>\r\n                    </div>\r\n                </nav>\r\n\r\n                {/* Le système de gestion des routes de notre application */}\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" component={PokemonList} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\r\n                    <PrivateRoute exact path=\"/pokemon/add\" component={PokemonAdd} />\r\n                    <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                    <PrivateRoute path=\"/pokemons/:id\" component={PokemonDetail} />\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n  \r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}